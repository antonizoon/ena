# on: [push, pull_request]
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Rust

jobs:
  # clippy:
  #   name: Clippy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v2

  #     - name: Install nightly toolchain with clippy available
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         target: x86_64-unknown-linux-musl
  #         toolchain: nightly
  #         override: true
  #         components: clippy

  #     - name: Run cargo clippy
  #       uses: actions-rs/cargo@v1
  #       continue-on-error: true  # WARNING: only for this example, remove it!
  #       with:
  #         command: clippy
  #         args: -- -D warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install nightly toolchain with rustfmt available
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: x86_64-unknown-linux-musl
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: true  # WARNING: only for this example, remove it!
        with:
          command: fmt
          args: --all -- --check

  # combo:
  #   name: Clippy + rustfmt
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v2

  #     - name: Install nightly toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: nightly
  #         override: true
  #         components: rustfmt, clippy

  #     - name: Run cargo fmt
  #       uses: actions-rs/cargo@v1
  #       continue-on-error: true  # WARNING: only for this example, remove it!
  #       with:
  #         command: fmt
  #         args: --all -- --check

  #     - name: Run cargo clippy
  #       uses: actions-rs/cargo@v1
  #       continue-on-error: true  # WARNING: only for this example, remove it!
  #       with:
  #         command: clippy
  #         args: -- -D warnings

  test:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        label:
          - Windows x86_64
          - Linux x86_64 musl
        include:
          - label: Linux x86_64 musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          # Integration tests are disabled on Windows as they take *way* too
          # long to pull the Docker image
          - label: Windows x86_64
            os: windows-latest
            test_flags: --skip buildtest --skip integration
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@master

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: nightly
          override: true

      # - name: Run tests
      #   uses: actions-rs/cargo@v1
      #   continue-on-error: true  # WARNING: only for this example, remove it!
      #   with:
      #     command: test
      #     args: --all -- ${{ matrix.test_flags }}

      - name: Run cargo update
        uses: actions-rs/cargo@v1
        with:
          command: update

      - name: Run build
        uses: actions-rs/cargo@v1
        continue-on-error: true  # WARNING: only for this example, remove it!
        with:
          command: build
          args: -j 2 --target ${{ matrix.target }} # --release
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          # OPENSSL_DIR: /usr/local/ssl

      # Artifacts and releases are currently unstable for Github Actions
      # https://github.com/actions/upload-artifact/issues/59
      # https://github.com/actions/upload-release-asset/issues/16

      # - run: zip -9 target/${{ matrix.target }}/release/testrs-v0.1.0-${{ matrix.target }} target/${{ matrix.target }}/release/testrs.exe
        # continue-on-error: true
      
      # - if: matrix.os == 'windows-latest'
      #   run: tar czf target/${{ matrix.target }}/release/testrs-v0.1.0-${{ matrix.target }}.tar.gz target/${{ matrix.target }}/release/testrs.exe
      #   continue-on-error: true

      # - if: matrix.os != 'windows-latest'
      #   run: tar czf target/${{ matrix.target }}/release/testrs-v0.1.0-${{ matrix.target }}.tar.gz target/${{ matrix.target }}/release/testrs
      #   continue-on-error: true

      # - name: Create artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: my-artifact
      #     path: target/${{ matrix.target }}/release/testrs-v0.1.0-${{ matrix.target }}.tar.gz
